name: Build and deploy ASP.Net Core app to Azure Web App - serviceorders

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:19.03.12
        options: --privileged

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and run Docker Compose services
        run: |
          docker-compose up -d

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'  # Adjust version if needed

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release

      - name: Test
        run: |
          dotnet test --configuration Release --logger trx --results-directory TestResults --collect:"XPlat Code Coverage"

      - name: List TestResults directory (Debug Step)
        run: ls TestResults/**/*
      
      - name: Install reportgenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Convert coverage report to cobertura format
        run: |
          reportgenerator "-reports:TestResults/**/coverage.opencover.xml" "-targetdir:coveragereport" "-reporttypes:cobertura"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: coveragereport

      - name: Tear down Docker Compose services
        run: docker-compose down

  sonar:
    name: Build and analyze
    runs-on: windows-latest
    needs: test
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'  # Alternative distribution options are available.
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Download code coverage report
        uses: actions/download-artifact@v4
        with:
          name: code-coverage-report
          path: coveragereport
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: pwsh
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"MatheusM15_services-orders" /o:"matheusm15" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="coveragereport/coverage.cobertura.xml"
          dotnet build --configuration Release
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  deploy:
    runs-on: windows-latest
    needs: sonar
    environment:
      name: 'Production'
    permissions:
      id-token: write  # This is required for requesting the JWT

    steps:
      - name: Download artifact from test job
        uses: actions/download-artifact@v4
        with:
         
